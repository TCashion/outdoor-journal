    1. Determine the "proper" route (HTTP Method & Endpoint). 
    2. Add the UI (link and/or form) that will trigger the HTTP request that matches the route.
    3. Define the route in the appropriate router module that will match the HTTP request and map it to the <controller>.<method> that will perform the desired functionality.
    4. Add the controller action/method and be sure to export it.
    5. In the controller, perform necessary CRUD and either render (passing it data) in the case of a GET request, or redirect if data has been mutated (POST, PUT & DELETE). If rendering, code the view template if necessary.



CURRENT
AAU, from the show page I want to see the logs with date, content, and number of comments & likes. I want to interact with the card by liking 



        1. Determine the "proper" route (HTTP Method & Endpoint). 

            POST /trips/:id/logs/likes

        2. Add the UI (link and/or form) that will trigger the HTTP request that matches the route.

            button on the card

        3. Define the route in the appropriate router module that will match the HTTP request and map it to the <controller>.<method> that will perform the desired functionality.

            router.post('/trips/:id/logs/likes', isLoggedIn, logsCtrl.updateLikes);

        4. Add the controller action/method and be sure to export it.

            function updateLikes should check if the user ID already exists in the likes array. If it does, do nothing. If it doesn't push the id to the array 

        5. In the controller, perform necessary CRUD and either render (passing it data) in the case of a GET request, or redirect if data has been mutated (POST, PUT & DELETE). If rendering, code the view template if necessary.

            redirect to show page 







NEXT 
or making a comment using the buttons on the card.


        1. Determine the "proper" route (HTTP Method & Endpoint). 
        2. Add the UI (link and/or form) that will trigger the HTTP request that matches the route.
        3. Define the route in the appropriate router module that will match the HTTP request and map it to the <controller>.<method> that will perform the desired functionality.
        4. Add the controller action/method and be sure to export it.
        5. In the controller, perform necessary CRUD and either render (passing it data) in the case of a GET request, or redirect if data has been mutated (POST, PUT & DELETE). If rendering, code the view template if necessary.




 

